paste("hello","Jared","And other")
paste(C("Hello","Hey","Howdy"),c("Jared","Bod","David"))
paste(c("Hello","Hey","Howdy"),c("Jared","Bod","David"))
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql2")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql2")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql")
head(Table1)
Table1<- sqlQuery(db,"select * from `b每日数据明细` where QUARTER(日期)=QUARTER(now())")
Table1<- sqlQuery(db,"select * from `b每日数据明细` where QUARTER(日期)=QUARTER(now())")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql")
Table1<- sqlQuery(db,"select * from `b每日数据明细` where QUARTER(日期)=QUARTER(now())")
require(RODBC)
Table1<- sqlQuery(db,"select * from `b每日数据明细` where QUARTER(日期)=QUARTER(now())")
library(odbc)
con <- dbConnect(odbc::odbc(), "mysql")
Table1<- sqlQuery(con,"select * from `b每日数据明细` where QUARTER(日期)=QUARTER(now())")
require(RODBC)
db<- odbcConnect("mysql")
Table1<- sqlQuery(db,"SELECT * FROM `b每日数据明细` WHERE DATE_FORMAT( 日期, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )")
head(Table1)
head(Table1)
Table2<- sqlQuery(db,"SELECT * FROM `c意向客户明细` WHERE DATE_FORMAT( 日期, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )")
head(Table2)
head(Table2)
require(reshape)
head(tips)
require(ggplot2)
aggregate(tip~sex,data=tips,var)
shapiro.test(tips$tip)
ggplot(tips,aes(x=tip,fill=sex))+geom_histogram(binwidth = .5,alpha=1/2)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/housing.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/housing.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/housing.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/housing.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
require(ggplot2)
require(UsingR)
require(ggplot2)
heaf
head(father.son)
ggplot(father.son,aes(x=fheight,y=fheight))+geom_smooth(method = "lm")+labs(x="fathers",y="sons")
heightslm<- lm(sheight-fheight,data=father.son)
heightslm<- lm(sheight~fheight,data=father.son)
heightslm
summary
summary(heightslm)
head(housing)
h1<- read.table("https://www.jaredlander.com/data/housing.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
head(h1)
ggplot(housing,aes(x=Mark.Value.per.SqFt,y=ValuePerSqFt))+geom_point()
ggplot(housing,aes(x=Market.Value.per.SqFt,y=ValuePerSqFt))+geom_point()
ggplot(housing,aes(x=SqFt,y=ValuePerSqFt))+geom_point()
ggplot(housing,aes(x=Gross.SqFt,y=ValuePerSqFt))+geom_point()
head(h1$Gross.SqFt)
head(h1$Market.Value.per.SqFt)
ggplot(housing,aes(x=Gross.SqFt,y=Market.Value.per.SqFt))+geom_point()
names(housing)<- c("Neighborhood","Class","Units","YearBuilt","SqFt","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
names(h1)<- c("Neighborhood","Class","Units","YearBuilt","SqFt","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
ggplot(h1,aes(x=SqFt,y=ValuePerSqFt))+geom_point()
ggplot(h1,aes(x=log(SqFt),y=ValuePerSqFt))+geom_point()
ggplot(h1,aes(x=SqFt,y=log(ValuePerSqFt))+geom_point()
)
ggplot(h1,aes(x=SqFt,y=log(ValuePerSqFt))+geom_point()
)
ggplot(h1,aes(x=SqFt,y=log(ValuePerSqFt)))+geom_point()
ggplot(h1,aes(x=log(SqFt),y=log(ValuePerSqFt)))+geom_point()
ggplot(h1,aes(x=log(Units),y=log(ValuePerSqFt)))+geom_point()
house1<- lm(ValuePerSqFt~Units+SqFt+Boro,data=h1)
summary(house1)
save.image("~/Git/soul-mate/2019.1.2.RData")
load("~/Git/soul-mate/2019.1.2.RData")
load("~/Git/soul-mate/2019.1.2.RData")
h1<- read.table("https://www.jaredlander.com/data/housing.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
head(h1)
ggplot(housing,aes(x=Mark.Value.per.SqFt,y=ValuePerSqFt))+geom_point()
ggplot(housing,aes(x=Gross.SqFt,y=ValuePerSqFt))+geom_point()
head(h1$Gross.SqFt)
names(housing)<- c("Neighborhood","Class","Units","YearBuilt","SqFt","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
summary(house1)
summary(house1)
coef(house1)
load("~/Git/soul-mate/2019.1.2.RData")
coef(house1)
require(coefplot)
install.packages("coefplot")
require(coefplot)
coefplot(house1)
house1<- lm(ValuePerSqFt~Units+SqFt+Boro,data=housing)
house1<- lm(ValuePerSqFt~Units+SqFt+Boro,data=h1)
coefplot(house1)
house2<- lm(ValuePerSqFt~Units*SqFt+Boro,data=h1)
house3<- lm(ValuePerSqFt~Units:SqFt+Boro,data=h1)
coefplot(house2)
coefplot(house3)
house2$coefficients
house3$coefficients
house4<- lm(ValuePerSqFt~Units*SqFt*Boro,data=h1)
coefplot(house4)
house5<- lm(ValuePerSqFt~SqFt*Units*Income,h1)
names(housing)<- c("Neighborhood","Class","Units","YearBuilt","SqFt","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
names(h1)<- c("Neighborhood","Class","Units","YearBuilt","SqFt","IncomePerSqFt","Expense","ExpensePerSqFt","NetIncome","Value","ValuePerSqFt","Boro")
house5<- lm(ValuePerSqFt~SqFt*Units*Income,h1)
house5<- lm(ValuePerSqFt~SqFt*Units*Income,data=h1)
house5<- lm(ValuePerSqFt~SqFt*Units*NetIncome,data=h1)
coefplot(house5)
multiplot(house1,house2,house3,house4,house5)
h2<- read.table("https://www.jaredlander.com/data/housingNew.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
housePerdict<- predict(house1,newdata = h2,se.fit = TURE,interval = "prediction",level = .95)
housePerdict<- predict(house2,newdata = h2,se.fit = TURE,interval = "prediction",level = .95)
housePerdict<- predict(house3,newdata = h2,se.fit = TURE,interval = "prediction",level = .95)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs$Income<- with(acs,FamilyIncome>=150000)
require(ggplot2)
require(useful)
ggplot(acs,aes(x=FamilyIncome))+geom_density(fill="grey",color="grey")+geom_vline(xintercept = 150000)+scale_x_continuous(lable=multiple.dollar,limits = c(0,1000000))
head(acs)
incomel<- glm(Income~HouseCosts+NumWorkers+OwnRent+NumBedrooms+FamilyType,data = acs,family = binomial(link = "logit"))
summary
summary(incomel)
invlogit<- function(x)
{
1/(1+exp(-x))
}
invlogit(income1$coefficients)
invlogit(incomel$coefficients)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
h2<- read.table("https://www.jaredlander.com/data/housingNew.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
head(h2)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://www.jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://www.jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://www.jaredlander.com/data/housing1.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://www.jaredlander.com/data/housing.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
h3<- read.table("http://www.jaredlander.com/data/housing.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
hou<- read.table("https://www.jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("http://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs<- read.table("https://jaredlander.com/data/acs_ny.csv",sep = ",",header = TRUE,stringsAsFactors = FALSE)
acs$Income<- with(acs,FamilyIncome>=150000)
require(ggplot2)
require(useful)
ggplot(acs,aes(x=FamilyIncome))+geom_density(fill="grey",color="grey")+geom_vline(xintercept = 150000)+scale_x_continuous(lable=multiple.dollar,limits = c(0,1000000))
ggplot(acs,aes(x=FamilyIncome))+
geom_density(fill="grey",color="grey")+
geom_vline(xintercept = 150000)+
scale_x_continuous(labels = multiple.dollar,limits = c(0,1000000))
head(acs)
incomel<- glm(Income~HouseCosts+NumWorkers+OwnRent+NumBedrooms+FamilyType,data = acs,family = binomial(link = "logit"))
summary(incomel)
invlogit<- function(x)
{
1/(1+exp(-x))
}
invlogit(income1$coefficients)
invlogit(incomel$coefficients)
savehistory("~/Git/soul-mate/20190107.Rhistory")
acs$Income
invlogit<- function(x)
{
1/(1+exp(-x))
}
invlogit(incomel$coefficients)
coefplot(incomel)
ggplot(acs,aes(x=NumChildren))+geom_histogram(binwidth = 1)
children1<- glm(NumChildren~FamilyIncome+FamilyType+OwnRent,familly=poisson(link = "log"))
head(acs)
children1<- glm(NumChildern~FamilyIncome+FamilyType+OwnRent,familly=poisson(link = "log"))
children1<- glm(acs$NumChildren~FamilyIncome+FamilyType+OwnRent,familly=poisson(link = "log"))
children1<- glm(NumChildern~FamilyIncome+FamilyType+OwnRent,data=acs,familly=poisson(link = "log"))
children1<- glm(NumChildern~FamilyIncome+FamilyType+OwnRent,
data=acs,familly=poisson(link = "log"))
children1<- glm(NumChildern~FamilyIncome+FamilyType+OwnRent,
data=acs,family=poisson(link = "log"))
children1<- glm(NumChildern~FamilyIncome+FamilyType+OwnRent,data=acs,family=poisson(link = "log"))
children1<- glm(NumChildren ~ FamilyIncome + FamilyType + OwnRent,data=acs,family = poisson(link = "log"))
summary(children1)
coefplot()
coefplot(children1)
z<- (acs$NumChildren-children1$fitted.values)/sqrt(children1$fitted.values)
sum(z^2)/children1$df.residual
pchisq(sum(z^2),children1$df.residual)
children2<- glm(NumChildren ~ FamilyIncome + FamilyType + OwnRent,data=acs,family = quasipoisson(link = "log"))
multiplot(children1,children2)
savehistory("~/Git/soul-mate/20190107pm.Rhistory")
require(survival)
head(bladder)
bladder[100:105,]
survObject<- with(bladder[100:105,],Surv(stop,event))
survObject
survObject[,1:2]
cox1<- coxph(Surv(stop,event)~rx+number+size+enum,data = bladder)
summary(cox1)
plot(survfit(cox1),xlab = "Days",ylab = "Survival Rate",conf.int = TRUE)
cox2<- coxph(Surv(stop,event)~strata(rx)+number+size+enum,data = bladder)
summary(cox2)
plot(survfit(cox2),xlab = "Days",ylab = "Survival Rate",conf.int = TRUE,col = 1:2)
legend("bottomleft",legend = c(1,2),lty=1,col = 1:2,text.col = 1:2,title = "rx")
cox.zph(cox1)
cox.zph(cox2)
head(bladder)
head(bladder2)
savehistory("~/Git/soul-mate/20190107m.Rhistory")
head(bladder)
require(survival)
head(bladder)、
head(bladder)
bladder[100:105,]
survObject<- with(bladder[100:105,],Surv(stop,event))
survObject
survObject[,1:2]
cox1<- coxph(Surv(stop,event)~rx+number+size+enum,data = bladder)
summary(cox1)
plot(survfit(cox1),xlab = "Days",ylab = "Survival Rate",conf.int = TRUE)
cox2<- coxph(Surv(stop,event)~strata(rx)+number+size+enum,data = bladder)
summary(cox2)
plot(survfit(cox2),xlab = "Days",ylab = "Survival Rate",conf.int = TRUE,col = 1:2)
legend("bottomleft",legend = c(1,2),lty=1,col = 1:2,text.col = 1:2,title = "rx")
cox.zph(cox1)
cox.zph(cox2)
head(bladder)
head(bladder2)
head(housing)
head(acs)
testFrme<- data.frame(First=sample(1:10,20,replace = TRUE),
First=sample(1:10,20,replace = TRUE),
First=sample(1:10,20,replace = TRUE),)
testFrme<- data.frame(First=sample(1:10,20,replace = TRUE),
Second=sample(1:20,20,replace = TRUE),
Third=sample(1:10,20,replace = TRUE),
Fourth=factor(rep(c("Alice","Bob","Charlie","David"),5)),
Fifth=ordered(rep(c("Edward","Frank","Georgia","Hank","Isaac"),4)),
Sixth=rep(c("a","b"),10),stringsAsFactors = F)
head(testFrme)
head(model.matrix(First~Second+Fourth+Fifth,testFrme))
require(useful)
head(build.x(First~Second+Fourth+Fifth,testFrme,contrasts = FALSE))
head(build.x(First~Second+Fourth+Fifth,testFrme,contrasts=c(Fourth=FALSE,Fifth=TRUE)))
acs$Income<- with(acs,FamilyIncome>= 150000)
head(acs)
acsX<- build.x(Income~NumBedrooms+NumChildren+NumPeople+NumRooms+NumUnits+NumVehicles+NumWorkers+OwnRent+YearBuilt+ElectricBill+FoodStamp+HeatingFuel+Insurance+Language-1,data=acs,contrasts = FALSE)
class(acsX)
dim(acsX)
topleft(acsX,c=6)
topright(acsX,c=6)
acsY<- build.y(Income~NumBedrooms+NumChildren+NumPeople+NumRooms+NumUnits+NumVehicles+NumWorkers+OwnRent+YearBuilt+ElectricBill+FoodStamp+HeatingFuel+Insurance+Language-1,data=acs)
head(acsY)
tail(acsY)
require(glmnet)
install.packages("glmnet")
require(glmnet)
set.seed(1863561)
acsCV1<- cv.glmnet(x=acsX,y=acsY,family="binomial",nfolds = 5)
acsCV1$lambda.min
acsCV1$lambda.lse
acsCV1$lambda.1se
plot(acsCV1)
coef(acsCV1,s="lambda.1se")
plot(acsCV1$glmnet.fit,xvar = "lambda")
abline(v=log(c(acsCV1$lambda.min,acsCV1$lambda.1se)),lty=2)
set.seed(71623)
acsCV2<- cv.glmnet(x=acsX,y=acsY,family="binomial",nfolds = 5,alpha=0)
acsCV2$lambda.min
acsCV2$lambda.1se
plot(acsCV2)
coef(acsCV2,s="lambda.1se")
plot(acsCV2$glmnet.fit,xvar = "lambda")
abline(v=log(c(acsCV2$lambda.min,acsCV2$lambda.1se)),lty=2)
require(parallel)
require(doParallel)
se.seed(2834673)
set.seed(2834673)
theFolds<- sample(rep(x=1:5,length.out=nrow(acs)))
theFolds<- sample(rep(x=1:5,length.out=nrow(acsX)))
alphas<- seq(from=0.5,to=1,by=0.05)
savehistory("~/Git/soul-mate/20190117.Rhistory")
load("data/ideo.rdata")
ideo<- read.table("https://jaredlander.com/data/ideo.rdata",sep = ",",header = TRUE,stringsAsFactors = FALSE)
load("data/ideo.rdata")
load("Users\Administrator\Documents\Git\ideo.rdata")
load("Git\ideo.rdata")
load("data/wifi.rdata")
load("https://jaredlander.com/data/ideo.rdata",sep = ",",header = TRUE,stringsAsFactors = FALSE)
load("https://jaredlander.com/data/ideo.rdata")
load(https://jaredlander.com/data/ideo.rdata,5L, useBytes = TRUE)
load("https://jaredlander.com/data/ideo.rdata",5L, useBytes = TRUE)
load("~/Git/soul-mate/ideo.rdata")
head(ideo.rdata)
head(ideo)
load("~/Git/soul-mate/wifi.rdata")
head(wifi)
require(ggplot2)
ggplot(wifi,aes)
ggplot(wifi,aes(x=x,y=y,color=Distance))+geom_point()+scale_color_gradient2(low = "blue",mid = "white",high = "red",midpoint = mean(wifi$Distance))
wifiMod1<- nis(Distance~sqrt((betaX-x)^2+(betaY-y)^2),,data=wifi,start=list(betaX=50,betaY=50))
wifiMod1<- nis(Distance~sqrt((betaX-x)^2+(betaY-y)^2),data=wifi,start=list(betaX=50,betaY=50))
wifiMod1<- nls(Distance~sqrt((betaX-x)^2+(betaY-y)^2),data=wifi,start=list(betaX=50,betaY=50))
summary(wifiMod1)
ggplot(wifi,aes(x=x,y=y,color=Distance))+geom_point()+scale_color_gradient2(low = "blue",mid = "white",high = "red",midpoint = mean(wifi$Distance))+aes(x=betaX,y=betaY,size=5,color="green")
ggplot(wifi,aes(x=x,y=y,color=Distance))+geom_point()+scale_color_gradient2(low = "blue",mid = "white",high = "red",midpoint = mean(wifi$Distance))+geom_point(data = as.data.frame(t(coef(wifiMod1))),aes(x=betaX,y=betaY,size=5,color="green")
ggplot(wifi,aes(x=x,y=y,color=Distance))+geom_point()+scale_color_gradient2(low = "blue",mid = "white",high = "red",midpoint = mean(wifi$Distance))+geom_point(data = as.data.frame(t(coef(wifiMod1))),aes(x=betaX,y=betaY,size=5,color="green"
ggplot(wifi,aes(x=x,y=y,color=Distance))+
geom_point()+
scale_color_gradient2(low = "blue",mid = "white",high = "red",midpoint = mean(wifi$Distance))+
geom_point(data = as.data.frame(t(coef(wifiMod1))),aes(x=betaX,y=betaY),size=5,color="green")
data("diamonds")
diaSpline1<- smooth.spline(x=diamonds$carat,y=diamonds$price)
diaSpline2<- smooth.spline(x=diamonds$carat,y=diamonds$price,df=2)
diaSpline3<- smooth.spline(x=diamonds$carat,y=diamonds$price,df=10)
diaSpline4<- smooth.spline(x=diamonds$carat,y=diamonds$price,df=20)
diaSpline5<- smooth.spline(x=diamonds$carat,y=diamonds$price,df=50)
diaSpline6<- smooth.spline(x=diamonds$carat,y=diamonds$price,df=100)
get.spline.info<- function(object)
{
data.frame(x=object$x,y=object$y,df=object$df)
}
require(plyr)
splineDF<- ldply(list(diaSpline1,diaSpline2,diaSpline3,diaSpline4,diaSpline5,diaSpline6),get.spline.info)
head(splineDF)
g<- ggplot(diamonds,aes(x=carat,y=price))+geom_point()
g+geom_line(data=splineDF,aes(x=x,y=y,color+factor(round(df,0)),group=df))+
scale_color_discrete("Degree of \nFreedom")
g+geom_line(data=splineDF,aes(x=x,y=y,color=factor(round(df,0)),group=df))+
scale_color_discrete("Degree of \nFreedom")
require(splines)
head(ns(diamonds$carat,df=1))
head(ns(diamonds$carat,df=2))
head(ns(diamonds$carat,df=3))
head(ns(diamonds$carat,df=4))
g+ggplot(diamonds,aes(x=carat,y=price))+geom_point()
g<-ggplot(diamonds,aes(x=carat,y=price))+geom_point()
g+stat_smooth(method = "lm",formula = y~ns(x,6),color="blue")
g+stat_smooth(method = "lm",formula = y~ns(x,3),color="red")
credit<- read.table("https://http://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data)",sep = ",",header = TRUE,stringsAsFactors = FALSE)
credit<- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data)",sep = ",",header = TRUE,stringsAsFactors = FALSE)
credit<- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data",sep = ",",header = TRUE,stringsAsFactors = FALSE)
head(credit)
names(credit)<- c("ch","du","cr","pu","crt","sa","em","in","ge","ot","ye","re","age","ot","ho","ex","jo","nu","ph","fo","cred")
names(credit)<- c("ch","du","cr","pu","crt","sa","em","in","ge","oot","ye","re","age","ot","ho","ex","jo","nu","ph","fo","cred")
names(credit)<- c("ch","du","cr","pu","crt","sa","em","ins","gen","oth","ye","re","age","ot","ho","ex","jo","nu","ph","fo","cred")
names(credit)<- c("ch","du","cr","pu","crt","sa","em","ins","gen","oth","ye","re","age","ot","ho","ex","jo","nu","ph","fo","cred","11")
creditNames<- c("ch","du","cr","pu","crt","sa","em","ins","gen","oth","ye","re","age","ot","ho","ex","jo","nu","ph","fo","cred")
credit<- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data",sep = ",",header = FALSE,col.names = creditNames,stringsAsFactors = FALSE)
dim(credit)
names(credit)
row.names(credit)
row(credit)
dim(credit)
# 决策树
require(rpart)
creditTree<- rpart(credit~ CreditAmount+Age+CreditHistory+Employment,data=credit)
savehistory("~/Git/soul-mate/20190118.Rhistory")
